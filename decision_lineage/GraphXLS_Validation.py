##########################################################
#               Import Dependencies
##########################################################

import math
import numpy as np
import pandas as pd
import io
import copy
from pandasql import sqldf
import re
import os
import warnings
warnings.filterwarnings("ignore")


# Your current directory (change this)
# Directory = r"C:\Users\ShenliangWu\Downloads\DHL\Decision_Lineage"

# change directory
# os.chdir(Directory)

##########################################################
#           Read and clean the Graph data
##########################################################

# Sheet name in Rule2Graph.xlsx (change this)
# section_sheet = 'Section_4_Mortgage_Statement'
section_sheet = 'Section_5_Tax_Insurance'
# section_sheet = 'Section_6_Harzard_Insurance'
# section_sheet = 'Section_15_1003_Application'


df = pd.read_excel("Rule2Graph.xlsx", sheet_name = section_sheet)

# Convert column names to uppercase
df.columns = [x.upper() for x in df.columns]

# Modify ID columns
df['NODE_ID'] = df['NODE_ID'].str.replace("['.','-']","_")
df['PARENT_ID'] = df['PARENT_ID'].str.replace("['.','-']","_")

# Remove all leading and trailing spaces from ID columns
df['NODE_ID'] = df['NODE_ID'].str.strip()
df['PARENT_ID'] = df['PARENT_ID'].str.strip()

# Add 'PARENT_DESC' column from 'NODE_DESC'      
df = pd.merge(df, df[['NODE_ID', 'NODE_DESC']], how = 'left', left_on = ['PARENT_ID'], right_on = ['NODE_ID'])
# rename columns
df = df.rename(columns={'NODE_ID_x':'NODE_ID', 'NODE_ID_y':'PARENT_ID_NEW', 'NODE_DESC_x':'NODE_DESC', 'NODE_DESC_y':'PARENT_DESC_NEW'})

df = df.drop_duplicates(subset=['NODE_ID', 'PARENT_ID'], keep="first")



####################################################################################
####################################################################################
#           Code to generate indicator column for each requirement
####################################################################################
####################################################################################


####################################################################################
# Requirement-1: auto create node_type
####################################################################################

#### step-1: Generate 'RULE_TYPE' whether non_raw_attr/raw_attr
'''
Below code traverses from root node to raw attributes
'''
df1 = df.copy()

# Root node
root = ''
current_parent = [root]
current_children = df1[df1["PARENT_ID"].isnull()]['NODE_ID'].tolist()

data = []
while len(current_children)>0:
    
    # Dataset of children of current_parent
    temp = df1[df1["PARENT_ID"].isin(current_parent)]

    for pt_item in current_parent:
        temp_parent = temp[temp["PARENT_ID"]==pt_item]
        rule_type = ''
        for index, row in temp_parent.iterrows():

            rule_type = "non_raw_attr"
        data.append((pt_item, rule_type))
        

    current_parent = current_children
    current_children = df1[df1["PARENT_ID"].isin(current_parent)]['NODE_ID'].tolist()     
                
# Convert list to dataframe
data = pd.DataFrame(data, columns=["NODE_ID", "RULE_TYPE"])            

# Merge RULE_TYPE column with main dataframe
df1 = pd.merge(df1, data, how = 'left', left_on = ['NODE_ID'], right_on = ['NODE_ID'])


#### step-2: Generate 'AUTOGENERATED_NODE_TYPE' column (Label: master, raw_attr, decision_node)
# Places FORMULAs in one column 

df1["AUTOGENERATED_NODE_TYPE"] = ''
for i in range(len(df1)):
    
    if df1["RULE_TYPE"][i] == "non_raw_attr":
        df1["AUTOGENERATED_NODE_TYPE"][i] = "decision_node"
    else:
        df1["AUTOGENERATED_NODE_TYPE"][i] = "raw_attr"
    
    if pd.isna(df1["PARENT_ID"][i])==True:
        df1["AUTOGENERATED_NODE_TYPE"][i] = "master"

    # if pd.isna(df1["FORMULA"][i])==True:
    #     df1["FORMULA"][i] = df1["FORMULA2"][i]

# Label "leaf_rules" (parents of 'raw_attr' are 'leaf_rule')
for i in range(len(df1)): 
    for j in range(len(df1)):
        if df1["AUTOGENERATED_NODE_TYPE"][i] == "raw_attr":
            if df1["NODE_ID"][j] == df1["PARENT_ID"][i]:
                df1["AUTOGENERATED_NODE_TYPE"][j] = "leaf_rule"



#### step-3: Generate 'FORMULA' for non-leaf rules
'''
Below code traverses from root node to leaf rules
'''
# Remove raw attributes from the dataframe
df2 = df1[~df1["AUTOGENERATED_NODE_TYPE"].isin(['raw_attr'])]

# Root node
root = ''
current_parent = [root]
current_children = df2[df2["PARENT_ID"].isnull()]['NODE_ID'].tolist()

data = []
while len(current_children)>0:
    
    # Dataset of children of current_parent
    temp = df2[df2["PARENT_ID"].isin(current_parent)]

    for pt_item in current_parent:
        temp_parent = temp[temp["PARENT_ID"]==pt_item]
        formula = ''
        for index, row in temp_parent.iterrows():

            if row['OPERATOR'] != "":
                formula = formula + " "+ str(row['OPERATOR']) + " " + str(row['NODE_ID'])
            else:
                formula = formula +str(row['NODE_ID'])
        data.append((pt_item, formula.strip()))
        

    current_parent = current_children
    current_children = df2[df2["PARENT_ID"].isin(current_parent)]['NODE_ID'].tolist()     
                
# Convert list to dataframe
data = pd.DataFrame(data, columns=["NODE_ID","FORMULA2"])            

# Merge FORMULA column with main dataframe
df1 = pd.merge(df1, data, how = 'left', left_on = ['NODE_ID'], right_on = ['NODE_ID'])

# drop the extra columns
df1 = df1.drop(['FORMULA2', 'RULE_TYPE'], axis=1) 

# Generate flag if manually created node_type column does not match auto generated one
df1.loc[df1["NODE_TYPE"]!=df1["AUTOGENERATED_NODE_TYPE"], "NODE_TYPE_MISMATCH"] = 1

######################################################################
# Requirement-2: auto check if all leaf_rule_node rows have formula.
######################################################################

# df1.loc[(df1["NODE_TYPE"]=="leaf_rule" and df1["FORMULA"].isnull()), "FORMULA_MISSING"] = 1
def condition1(s):
    if s['AUTOGENERATED_NODE_TYPE'] == 'leaf_rule' and pd.isna(s['FORMULA'])==True:
        return 1
        
df1['FORMULA_MISSING'] = df1.apply(condition1, axis=1)


##############################################################################
# Requirement-3: auto validate formula attr names match raw_attr node names
##############################################################################

'''
Below code traverses from root node to leaf rules
'''
# Remove raw attributes from the dataframe
df2 = df1[df1["AUTOGENERATED_NODE_TYPE"].isin(['leaf_rule'])]

data = []
for index, row in df2.iterrows():
    
    # current parent and children
    current_parent = str(row["NODE_ID"])
    current_children = df1[df1["PARENT_ID"]==current_parent]["NODE_ID"].tolist()

    # Formula for leaf_rule
    formula = str(row["FORMULA"]).strip()

    for i in range(len(current_children)):
        if str(df1[df1["NODE_ID"]==current_children[i]]["NODE_DESC"].item()) not in formula:
            FORMULA_ATTR_MISMATCH = 1
            data.append((current_children[i], FORMULA_ATTR_MISMATCH))
        
                
# Convert list to dataframe
data = pd.DataFrame(data, columns=["NODE_ID","FORMULA_ATTR_MISMATCH"])            

# Merge FORMULA column with main dataframe
df1 = pd.merge(df1, data, how = 'left', left_on = ['NODE_ID'], right_on = ['NODE_ID'])


###############################################################################################
# Requirement-4: Description for the same rule when it is a parent vs child should be the same 
###############################################################################################

# FIXED ALREADY : See 'PARENT_DESC_NEW' and 'PARENT_ID_NEW' columns

##############################################################################
# Requirement-5: There should be only one raw attribute in each row 
##############################################################################
def condition2(s):
    if s['AUTOGENERATED_NODE_TYPE'] == 'raw_attr':
        t = re.split('\s|,', s['NODE_DESC']) #looks for comma or space in the raw attribute desc
        if len(t) > 1:
            return 1
df1['MULTIPLE_RAW_ATTR_IND'] = df1.apply(condition2, axis=1)


df1.to_csv("test.csv", index=False)